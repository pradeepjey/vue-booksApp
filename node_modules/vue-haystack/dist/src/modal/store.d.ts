export declare const useModalStore: () => {
    items: import("vue").Ref<{
        close: <T>(data?: T | undefined) => void;
        options: {
            closeOnOverlayClick: boolean;
        };
        id: string;
        component: any;
        props: import("vue").ComponentPropsOptions<{
            [x: string]: unknown;
        }> | null;
        listeners: {
            [key: string]: (...params: any[]) => unknown;
        };
    }[]>;
    remove: (itemId: string) => void;
    push: <T_1 extends abstract new (...args: any) => any>(component: T_1, props?: InstanceType<T_1>["$props"] | undefined, listeners?: {
        [key: string]: (...params: any[]) => unknown;
    } | undefined, options?: {
        closeOnOverlayClick: boolean;
    } | undefined) => {
        onClose: <T_2>(callback: (data?: T_2 | undefined) => void) => {
            close: <T>(data?: T | undefined) => void;
            options: {
                closeOnOverlayClick: boolean;
            };
            id: string;
            component: any;
            props: import("vue").ComponentPropsOptions<{
                [x: string]: unknown;
            }> | null;
            listeners: {
                [key: string]: (...params: any[]) => unknown;
            };
        };
    };
} & {
    activeModal: import("vue").ComputedRef<{
        close: <T>(data?: T | undefined) => void;
        options: {
            closeOnOverlayClick: boolean;
        };
        id: string;
        component: any;
        props: import("vue").ComponentPropsOptions<{
            [x: string]: unknown;
        }> | null;
        listeners: {
            [key: string]: (...params: any[]) => unknown;
        };
    }>;
}, useModal: () => {
    close: <T>(data?: T | undefined) => void;
    options: {
        closeOnOverlayClick: boolean;
    };
    id: string;
    component: any;
    props: import("vue").ComponentPropsOptions<{
        [x: string]: unknown;
    }> | null;
    listeners: {
        [key: string]: (...params: any[]) => unknown;
    };
}, provideModal: (item: {
    close: <T>(data?: T | undefined) => void;
    options: {
        closeOnOverlayClick: boolean;
    };
    id: string;
    component: any;
    props: import("vue").ComponentPropsOptions<{
        [x: string]: unknown;
    }> | null;
    listeners: {
        [key: string]: (...params: any[]) => unknown;
    };
}) => {
    close: <T>(data?: T | undefined) => void;
    options: {
        closeOnOverlayClick: boolean;
    };
    id: string;
    component: any;
    props: import("vue").ComponentPropsOptions<{
        [x: string]: unknown;
    }> | null;
    listeners: {
        [key: string]: (...params: any[]) => unknown;
    };
}, modalStore: {
    items: import("vue").Ref<{
        close: <T>(data?: T | undefined) => void;
        options: {
            closeOnOverlayClick: boolean;
        };
        id: string;
        component: any;
        props: import("vue").ComponentPropsOptions<{
            [x: string]: unknown;
        }> | null;
        listeners: {
            [key: string]: (...params: any[]) => unknown;
        };
    }[]>;
    remove: (itemId: string) => void;
    push: <T_1 extends abstract new (...args: any) => any>(component: T_1, props?: InstanceType<T_1>["$props"] | undefined, listeners?: {
        [key: string]: (...params: any[]) => unknown;
    } | undefined, options?: {
        closeOnOverlayClick: boolean;
    } | undefined) => {
        onClose: <T_2>(callback: (data?: T_2 | undefined) => void) => {
            close: <T>(data?: T | undefined) => void;
            options: {
                closeOnOverlayClick: boolean;
            };
            id: string;
            component: any;
            props: import("vue").ComponentPropsOptions<{
                [x: string]: unknown;
            }> | null;
            listeners: {
                [key: string]: (...params: any[]) => unknown;
            };
        };
    };
} & {
    activeModal: import("vue").ComputedRef<{
        close: <T>(data?: T | undefined) => void;
        options: {
            closeOnOverlayClick: boolean;
        };
        id: string;
        component: any;
        props: import("vue").ComponentPropsOptions<{
            [x: string]: unknown;
        }> | null;
        listeners: {
            [key: string]: (...params: any[]) => unknown;
        };
    }>;
};
