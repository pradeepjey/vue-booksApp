import { ComponentPropsOptions, Ref } from "vue";
declare type ComponentBaseType = abstract new (...args: any) => any;
export interface ItemBase<OptionsType> {
    /** The unique item id. Automatically generated */
    readonly id: string;
    /** The item component type, can be used with `<component :is="item.component" />` */
    component: InstanceType<ComponentBaseType>;
    /** The props that are passed to the component */
    props: ComponentPropsOptions | null;
    /** The props that are passed to the component */
    listeners: {
        [key: string]: (...params: any[]) => unknown;
    };
    options: OptionsType | null;
}
export declare const createItemStoreInstance: <I extends ItemBase<O>, Res extends {
    [key: string]: unknown;
}, O extends {
    [key: string]: unknown;
} | null, Extend extends {
    [key: string]: unknown;
}>(createItem: (item: ItemBase<O>) => {
    item: I;
    useReturn: Res;
}, extendStore?: (items: Ref<I[]>) => Extend) => {
    store: {
        items: Ref<I[]>;
        remove: (itemId: I["id"]) => void;
        push: <T extends ComponentBaseType>(component: T, props?: InstanceType<T>["$props"] | undefined, listeners?: {
            [key: string]: (...params: any[]) => unknown;
        } | undefined, options?: I["options"] | undefined) => Res;
    } & Extend;
    useStore: () => {
        items: Ref<I[]>;
        remove: (itemId: I["id"]) => void;
        push: <T extends ComponentBaseType>(component: T, props?: InstanceType<T>["$props"] | undefined, listeners?: {
            [key: string]: (...params: any[]) => unknown;
        } | undefined, options?: I["options"] | undefined) => Res;
    } & Extend;
    useItem: () => I;
    provideItem: (item: I) => I;
};
export {};
