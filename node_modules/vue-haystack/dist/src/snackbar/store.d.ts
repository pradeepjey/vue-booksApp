export declare const snackTimer: (callback: () => void, duration?: number, updateInterval?: number) => {
    /** stop/reset the timer */
    clear: () => void;
    /** pause the timer */
    pause: () => void;
    /** resume the timer */
    resume: () => void;
    /** remaining lifetime */
    remainingTime: {
        value: number;
    };
    /** lifetime progress value counting from 1 to 0 */
    progress: {
        value: number;
    };
    /** total duration */
    duration: number;
};
export declare const useSnackbar: () => {
    items: import("vue").Ref<{
        close: <T>(data?: T | undefined) => void;
        timer: {
            /** stop/reset the timer */
            clear: () => void;
            /** pause the timer */
            pause: () => void;
            /** resume the timer */
            resume: () => void;
            /** remaining lifetime */
            remainingTime: {
                value: number;
            };
            /** lifetime progress value counting from 1 to 0 */
            progress: {
                value: number;
            };
            /** total duration */
            duration: number;
        };
        options: {
            time?: number | undefined;
        };
        id: string;
        component: any;
        props: import("vue").ComponentPropsOptions<{
            [x: string]: unknown;
        }> | null;
        listeners: {
            [key: string]: (...params: any[]) => unknown;
        };
    }[]>;
    remove: (itemId: string) => void;
    push: <T_1 extends abstract new (...args: any) => any>(component: T_1, props?: InstanceType<T_1>["$props"] | undefined, listeners?: {
        [key: string]: (...params: any[]) => unknown;
    } | undefined, options?: {
        time?: number | undefined;
    } | undefined) => {
        onClose: <T_2>(callback: (data?: T_2 | undefined) => void) => {
            close: <T>(data?: T | undefined) => void;
            timer: {
                /** stop/reset the timer */
                clear: () => void;
                /** pause the timer */
                pause: () => void;
                /** resume the timer */
                resume: () => void;
                /** remaining lifetime */
                remainingTime: {
                    value: number;
                };
                /** lifetime progress value counting from 1 to 0 */
                progress: {
                    value: number;
                };
                /** total duration */
                duration: number;
            };
            options: {
                time?: number | undefined;
            };
            id: string;
            component: any;
            props: import("vue").ComponentPropsOptions<{
                [x: string]: unknown;
            }> | null;
            listeners: {
                [key: string]: (...params: any[]) => unknown;
            };
        };
    };
} & {
    log: () => void;
}, useSnack: () => {
    close: <T>(data?: T | undefined) => void;
    timer: {
        /** stop/reset the timer */
        clear: () => void;
        /** pause the timer */
        pause: () => void;
        /** resume the timer */
        resume: () => void;
        /** remaining lifetime */
        remainingTime: {
            value: number;
        };
        /** lifetime progress value counting from 1 to 0 */
        progress: {
            value: number;
        };
        /** total duration */
        duration: number;
    };
    options: {
        time?: number | undefined;
    };
    id: string;
    component: any;
    props: import("vue").ComponentPropsOptions<{
        [x: string]: unknown;
    }> | null;
    listeners: {
        [key: string]: (...params: any[]) => unknown;
    };
}, provideSnack: (item: {
    close: <T>(data?: T | undefined) => void;
    timer: {
        /** stop/reset the timer */
        clear: () => void;
        /** pause the timer */
        pause: () => void;
        /** resume the timer */
        resume: () => void;
        /** remaining lifetime */
        remainingTime: {
            value: number;
        };
        /** lifetime progress value counting from 1 to 0 */
        progress: {
            value: number;
        };
        /** total duration */
        duration: number;
    };
    options: {
        time?: number | undefined;
    };
    id: string;
    component: any;
    props: import("vue").ComponentPropsOptions<{
        [x: string]: unknown;
    }> | null;
    listeners: {
        [key: string]: (...params: any[]) => unknown;
    };
}) => {
    close: <T>(data?: T | undefined) => void;
    timer: {
        /** stop/reset the timer */
        clear: () => void;
        /** pause the timer */
        pause: () => void;
        /** resume the timer */
        resume: () => void;
        /** remaining lifetime */
        remainingTime: {
            value: number;
        };
        /** lifetime progress value counting from 1 to 0 */
        progress: {
            value: number;
        };
        /** total duration */
        duration: number;
    };
    options: {
        time?: number | undefined;
    };
    id: string;
    component: any;
    props: import("vue").ComponentPropsOptions<{
        [x: string]: unknown;
    }> | null;
    listeners: {
        [key: string]: (...params: any[]) => unknown;
    };
}, snackbarStore: {
    items: import("vue").Ref<{
        close: <T>(data?: T | undefined) => void;
        timer: {
            /** stop/reset the timer */
            clear: () => void;
            /** pause the timer */
            pause: () => void;
            /** resume the timer */
            resume: () => void;
            /** remaining lifetime */
            remainingTime: {
                value: number;
            };
            /** lifetime progress value counting from 1 to 0 */
            progress: {
                value: number;
            };
            /** total duration */
            duration: number;
        };
        options: {
            time?: number | undefined;
        };
        id: string;
        component: any;
        props: import("vue").ComponentPropsOptions<{
            [x: string]: unknown;
        }> | null;
        listeners: {
            [key: string]: (...params: any[]) => unknown;
        };
    }[]>;
    remove: (itemId: string) => void;
    push: <T_1 extends abstract new (...args: any) => any>(component: T_1, props?: InstanceType<T_1>["$props"] | undefined, listeners?: {
        [key: string]: (...params: any[]) => unknown;
    } | undefined, options?: {
        time?: number | undefined;
    } | undefined) => {
        onClose: <T_2>(callback: (data?: T_2 | undefined) => void) => {
            close: <T>(data?: T | undefined) => void;
            timer: {
                /** stop/reset the timer */
                clear: () => void;
                /** pause the timer */
                pause: () => void;
                /** resume the timer */
                resume: () => void;
                /** remaining lifetime */
                remainingTime: {
                    value: number;
                };
                /** lifetime progress value counting from 1 to 0 */
                progress: {
                    value: number;
                };
                /** total duration */
                duration: number;
            };
            options: {
                time?: number | undefined;
            };
            id: string;
            component: any;
            props: import("vue").ComponentPropsOptions<{
                [x: string]: unknown;
            }> | null;
            listeners: {
                [key: string]: (...params: any[]) => unknown;
            };
        };
    };
} & {
    log: () => void;
};
